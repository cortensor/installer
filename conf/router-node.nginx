# Cortensor Router Node Nginx Configuration
# Copyright (c) 2024-2025 Cortensor Network. All rights reserved.
# Copyright (c) 2024-2025 Eliza Labs Inc. All rights reserved.
#
# This file configures the nginx web server for the router node API endpoints.
# It provides secure access to specific API endpoints while blocking all other requests.
# Only explicitly defined API endpoints (/api/v1/*) are accessible from the outside.
# All requests are proxied to the local API server running on port 5010.
# SSL/TLS is managed by Certbot for secure HTTPS connections.
#
# Version: 0.0.2
# Last updated: May 31, 2025
#
# CORS Configuration:
# This configuration includes Cross-Origin Resource Sharing (CORS) settings to control which domains
# can access the API. There are two approaches implemented:
#
# 1. Permissive CORS: Allows requests from any origin (use with caution in production)
#    - add_header 'Access-Control-Allow-Origin' '*';
#
# 2. Restricted CORS: Only allows specific origins
#    - add_header 'Access-Control-Allow-Origin' 'https://example.com';
#    - For multiple domains, use a variable approach as shown in the configuration
#
# Each endpoint includes both examples (permissive commented out by default)
# Uncomment the approach you prefer and restart nginx

# Define allowed origins for CORS (used with restricted CORS approach)
map $http_origin $cors_allowed_origin {
    default "";
    "https://app1.cortensor.network" "$http_origin";
    "https://app2.cortensor.network" "$http_origin";
    "https://app3.cortensor.network" "$http_origin";
    # Add more allowed domains as needed
}

# CORS configuration snippet for reuse
# Include this in each location block that needs CORS support
# Example usage: include /etc/nginx/cors_config.conf;
# Save this section to /etc/nginx/cors_config.conf
#
# --- START CORS CONFIG SNIPPET ---
# if ($request_method = 'OPTIONS') {
#     add_header 'Access-Control-Allow-Origin' $cors_allowed_origin;
#     add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
#     add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-API-Key';
#     add_header 'Access-Control-Max-Age' 1728000;
#     add_header 'Content-Type' 'text/plain charset=UTF-8';
#     add_header 'Content-Length' 0;
#     return 204;
# }
# 
# # Restricted CORS (specific origins)
# add_header 'Access-Control-Allow-Origin' $cors_allowed_origin always;
# add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
# add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-API-Key' always;
# 
# # Permissive CORS (all origins - uncomment if needed, comment out the restricted CORS section above)
# # add_header 'Access-Control-Allow-Origin' '*' always;
# # add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
# # add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-API-Key' always;
# --- END CORS CONFIG SNIPPET ---

server {
    server_name router-dev-0.cortensor.network;
    
    # Block all requests by default
    location / {
        return 404;
    }
    
    # Allow specific endpoints
    location /api/v1/completions {
        # CORS configuration
        if ($request_method = 'OPTIONS') {
            # Preflight request handling
            add_header 'Access-Control-Allow-Origin' $cors_allowed_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-API-Key';
            add_header 'Access-Control-Max-Age' 1728000; # 20 days
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # Permissive CORS (all origins - uncomment if needed)
        # add_header 'Access-Control-Allow-Origin' '*' always;
        
        # Restricted CORS (specific origins)
        add_header 'Access-Control-Allow-Origin' $cors_allowed_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-API-Key' always;
        
        proxy_pass http://127.0.0.1:5010;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Streaming optimization settings
        proxy_buffering off;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        tcp_nodelay on;
        tcp_nopush off;
        proxy_buffer_size 4k;
        proxy_read_timeout 300s;
    }
    
    # Add more allowed endpoints as needed
    location /api/v1/status {
        # CORS configuration
        if ($request_method = 'OPTIONS') {
            # Preflight request handling
            add_header 'Access-Control-Allow-Origin' $cors_allowed_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-API-Key';
            add_header 'Access-Control-Max-Age' 1728000; # 20 days
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # Restricted CORS (specific origins)
        add_header 'Access-Control-Allow-Origin' $cors_allowed_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-API-Key' always;
        
        proxy_pass http://127.0.0.1:5010;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /api/v1/miners {
        proxy_pass http://127.0.0.1:5010;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /api/v1/sessions {
        proxy_pass http://127.0.0.1:5010;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /api/v1/info {
        proxy_pass http://127.0.0.1:5010;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /api/v1/tasks {
        proxy_pass http://127.0.0.1:5010;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /api/v1/ping {
        proxy_pass http://127.0.0.1:5010;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/router-dev-0.cortensor.network/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/router-dev-0.cortensor.network/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
    if ($host = router-dev-0.cortensor.network) {
        return 301 https://$host$request_uri;
    } # managed by Certbot
    listen 80;
    server_name router-dev-0.cortensor.network;
    return 404; # managed by Certbot
}
